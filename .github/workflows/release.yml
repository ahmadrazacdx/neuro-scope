# GitHub Actions workflow for automated releases
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      deploy_to_pypi:
        description: 'Deploy to PyPI (after TestPyPI success)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  contents: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run tests
      run: poetry run nox -s tests

    - name: Run quality checks
      run: |
        poetry run nox -s lint
        poetry run nox -s mypy

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Update version in pyproject.toml
      run: |
        poetry version ${{ steps.version.outputs.version }}

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  github-release:
    needs: [test, build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        if [[ -f CHANGELOG.md ]]; then
          # Extract changelog for this version
          CHANGELOG=$(awk '/^## \[?${{ needs.build.outputs.version }}\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag' CHANGELOG.md)
        else
          CHANGELOG="Release ${{ needs.build.outputs.version }}"
        fi
        
        # Save changelog to file for multiline output
        echo "$CHANGELOG" > release_notes.txt

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build.outputs.version }}
        name: Release v${{ needs.build.outputs.version }}
        body_path: release_notes.txt
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(needs.build.outputs.version, 'alpha') || contains(needs.build.outputs.version, 'beta') || contains(needs.build.outputs.version, 'rc') }}

  testpypi-release:
    needs: [test, build, github-release]
    runs-on: ubuntu-latest
    environment: testpypi
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TESTPYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        packages-dir: dist/

  pypi-release:
    needs: [test, build, github-release, testpypi-release]
    runs-on: ubuntu-latest
    environment: pypi
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_pypi == 'true'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist/

  docs-deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1

    - name: Install dependencies
      run: poetry install --with dev

    - name: Build documentation
      run: |
        poetry run nox -s docs-build

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/_build/html
        publish_branch: gh-pages
        commit_message: 'Deploy docs for v${{ needs.build.outputs.version }}'

  notify:
    needs: [test, build, github-release, pypi-release, docs-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.pypi-release.result == 'success'
      run: |
        echo "üéâ Successfully released NeuroScope v${{ needs.build.outputs.version }}!"
        echo "üì¶ Package: https://pypi.org/project/neuroscope/${{ needs.build.outputs.version }}/"
        echo "üìñ Documentation: https://ahmadrazacdx.github.io/neuroscope/"
        echo "üè∑Ô∏è GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.build.outputs.version }}"

    - name: Notify failure
      if: needs.pypi-release.result == 'failure' || needs.github-release.result == 'failure'
      run: |
        echo "Release failed!"
        echo "Check the logs for details."
        exit 1
